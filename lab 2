//метод кантора немного странный, по этому я просто поставил генератор случайных чисел))))))) 
#include "pch.h"
#include <iostream>
#include <conio.h>

	using namespace std;
	struct info {
		int number;//знаменатель
	};
	struct Node {
		info Data;
		Node *next = nullptr;
		Node *prev = nullptr;
	};
	struct Nodelist {
		Node *head = nullptr;
		Node *tail = nullptr;
		void add(int needed) {
			int i = 0;
			while (needed != i)
			{
				if (head == nullptr)
				{
					Node *element = new Node;
					element->Data.number = 1 + rand() % needed;
					head = element;
					tail = element;
					i++;
				}
				else {
					Node *element = new Node;
				regenerate:
					int generated = 1 + rand() % needed;
					if (Was_before(generated))
					{
						goto regenerate;
					}
					element->Data.number = generated;
					element->prev = tail;
					tail->next = element;
					tail = element;
					i++;
				}
			}
		}
		bool Was_before(int gen) {
			Node *temp = new Node;
			temp = head;
			while (temp->Data.number != gen)
			{
				if (temp->next != nullptr) {
					temp = temp->next;
				}
				else {
					return false;
				}
			}
			return true;
		}
		void print() {
			Node *temp = new Node;
			temp = head;
			while (temp != nullptr)
			{
				cout << temp->Data.number << "  " << endl;
				temp = temp->next;
			}

		}
		int sum() {
			int summa;
			Node *temp = new Node;
			temp = head;
			summa = temp->Data.number;
			while (temp != tail) {
				summa += temp->next->Data.number;
				temp = temp->next;
			}
			return summa;
		}
		void search(int number) {
			bool exist = false;
			Node *cur = new Node;
			cur = head;
			do {
					if (number == cur->Data.number)
							{
								exist = true;
								break;
							}	
					else {
					cur = cur->next;
					}
			} while (cur != nullptr);
			if (exist) {
				cout << "число есть в списке " << endl;
			}
			else {
				cout << "такого числа нет в списке " << endl;
			}
		}
		void Deleting(int number)
		{
			bool exist = false;
			Node *cur = new Node;
			cur = head;
			//Node *p = cur;
			while (cur->next != nullptr)
			{
				if (number == cur->Data.number)
				{
					exist = true;
					break;
				}
				else {
					cur = cur->next;
				}
			}
			if (exist) {
				cur->prev->next = cur->next;// тут теряется указатель, нужно ли что-либо удалять?
				cur->next->prev = cur->prev;
				delete cur;   // и вообще это нужно или нет
			}
			else {
				cout << "такого числа нет в списке " << endl;
			}
		}
	};



		
int main()
{
	setlocale(LC_ALL, "rus");
	int N;
	cout << "введите количество чисел в списке : " << endl;
	cin >> N;
	Nodelist List;
	List.add(N);
	char input;
	Menu:
	cout << "1: поиск числа в списке " << endl;
	cout << "2: удаление заданого числа из списка" << endl;
	cout << "3: сумма всех еллементов в списке" << endl;
	cout << "4: добавление следующего числа со списка " << endl;
	cout << "5: вывести на экран" << endl;
	input = _getch();
	if (input == '1') {
		float num;
		cout << " введите число которое хотите найти в списке :    ";
		cin >> num;
		List.search(num);
		goto Menu;
		
	}
	else if (input == '2') {
		float num;
		cout << " введите число которое хотите удалить из списка :    ";
		cin >> num;
		List.Deleting(num);
		goto Menu;
		
	}
	else if (input == '3') {
		cout << List.sum() << endl;
		goto Menu;
	}
	else if (input == '4') {
		int need;
		cin >> need;
		List.add(need);
		goto Menu;
	}
	else if (input == '5') {
		List.print();
		goto Menu;
	}

   

}

